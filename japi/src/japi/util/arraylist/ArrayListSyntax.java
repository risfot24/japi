package japi.util.arraylist;
/*
 * java.util.ArrayList 는 Object 배열을 이용해서
 * 데이터를 순차적으로 저장하는 공간.
 * 
 * 첫번째로 저장한 공간은 인덱스 0번값을 갖는다.
 * 배열에 더 이상 저장할 공간이 없으면 보다 큰 새로운 배열을
 * 생성하여 기존의 배열에 저장된 내용을 새로운 배열에 복사한
 * 다음에 저장한다.
 */

  /*
   * java.util.Vector 와 차이점
    - 벡터는 멀티스레드에 대한 동기화가 되어 있으나
    - java.util.ArrayList 는 동기화가 되어 있지 않다.
    
    
   */
  /*
   * 
     ArrayList 클래스
   1. ArrayList 와 Vector class 는 List 를 크기 변경 가능한
           배열로 구현한 것으로, 차이점은 Vector 클래스의 객체는
           원래 기본적으로 동기화 되지만, ArrayList 는 그렇지 않다.
   2. 비 동기화 된 컬렉션은 동기화된 컬렉션 보다 더 나은 성능을
         제공하며 스레드들이 컬렉션을 공유하지 않는 프로그램에서는
         일반적으로 ArrayList 를 Vector 보다 더 선호하며
      ArrayList 는 동기화를 고려하지 않는 Vector 처럼
         동작함으로써 스레드 동기화에 따르는 부담을 가지지 않기
         때문에 Vector 보다 빠르게 실행한다.     
   
     - 동기화 는 동시 접속으로 들어오는것 한녀석이 들어오면 들어온 녀석과 접속... 
      그리고 다른녀석이 들어올려면 하면 lock을 걸어 차단. 처
         음에 들어온 녀석이 끝날때까지 다른녀석이 접근못한다.
        
        비동기화 랜덤으로 접근하게 한다..
     vector 은 jdk 1.0 부터 있던것 는 한녀석 과 연결 해서 동기화
     ArrayList 는 비동기화 ... 그래서 연결된 녀석이 일을 안하면 끝난다.. 전체를 하나에 .,,, (어떻게 보면 객체지향도 비동기화 이다..)
     ajax (가 비동기화 된)것을 쓰면 빠르게 처리가 가능하다.
   
   - 채팅창에 swing 은 vector 로 쓴다...
   
   */


public class ArrayListSyntax {

}
